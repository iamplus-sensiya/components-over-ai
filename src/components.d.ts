/* tslint:disable */
/**
 * This is an autogenerated file created by the Stencil compiler.
 * It contains typing information for all components that exist in this project.
 */


import { HTMLStencilElement, JSXBase } from '@stencil/core/internal';
import {
  Color,
} from './interface';
import {
  OAIDrawersStack,
} from './components/drawer/drawer-stack';

export namespace Components {
  interface OaiButton {
    /**
    * (optional) The color of the button (pale / primary (default) / accent / error / warn)
    */
    'color'?: Color;
    /**
    * This attribute instructs browsers to download a URL instead of navigating to it, so the user will be prompted to save it as a local file. If the attribute has a value, it is used as the pre-filled file name in the Save prompt (the user can still change the file name if they want).
    */
    'download': string | undefined;
    /**
    * Contains a URL or a URL fragment that the hyperlink points to. If this property is set, an anchor tag will be rendered.
    */
    'href': string | undefined;
    /**
    * Specifies the relationship of the target object to the link object. The value is a space-separated list of [link types](https://developer.mozilla.org/en-US/docs/Web/HTML/Link_types).
    */
    'rel': string | undefined;
    /**
    * (optional) The minimum size of the button (xs / sm / lg / xl) (optional) The type of the button (default = filled / outlined (stroked)) (optional) The state of the button (disabled / pending / undefined = default)
    */
    'state'?: 'disabled' | 'pending';
    /**
    * Specifies where to display the linked URL. Only applies when an `href` is provided. Special keywords: `"_blank"`, `"_self"`, `"_parent"`, `"_top"`.
    */
    'target': string | undefined;
  }
  interface OaiDrawer {
    'inlineSize': string;
    'stack': OAIDrawersStack;
  }
  interface OaiDrawerStack {
    'pop': () => Promise<void>;
    'push': (name: string) => Promise<void>;
    'stack': string;
  }
  interface OaiProgressIndicator {
    'color'?: Color;
    /**
    * (optional) The size of the progress indicator (xs (default) / sm / lg / xl)
    */
    'size': 'xs' | 'sm' | 'lg' | 'xl';
  }
  interface OaiToolbar {
    /**
    * The color to use from your application's color palette. Default options are: `"primary"`, `"secondary"`, `"tertiary"`, `"success"`, `"warning"`, `"danger"`, `"light"`, `"medium"`, and `"dark"`. For more information on colors, see [theming](/docs/theming/basics).
    */
    'color'?: Color;
  }
}

declare global {


  interface HTMLOaiButtonElement extends Components.OaiButton, HTMLStencilElement {}
  var HTMLOaiButtonElement: {
    prototype: HTMLOaiButtonElement;
    new (): HTMLOaiButtonElement;
  };

  interface HTMLOaiDrawerElement extends Components.OaiDrawer, HTMLStencilElement {}
  var HTMLOaiDrawerElement: {
    prototype: HTMLOaiDrawerElement;
    new (): HTMLOaiDrawerElement;
  };

  interface HTMLOaiDrawerStackElement extends Components.OaiDrawerStack, HTMLStencilElement {}
  var HTMLOaiDrawerStackElement: {
    prototype: HTMLOaiDrawerStackElement;
    new (): HTMLOaiDrawerStackElement;
  };

  interface HTMLOaiProgressIndicatorElement extends Components.OaiProgressIndicator, HTMLStencilElement {}
  var HTMLOaiProgressIndicatorElement: {
    prototype: HTMLOaiProgressIndicatorElement;
    new (): HTMLOaiProgressIndicatorElement;
  };

  interface HTMLOaiToolbarElement extends Components.OaiToolbar, HTMLStencilElement {}
  var HTMLOaiToolbarElement: {
    prototype: HTMLOaiToolbarElement;
    new (): HTMLOaiToolbarElement;
  };
  interface HTMLElementTagNameMap {
    'oai-button': HTMLOaiButtonElement;
    'oai-drawer': HTMLOaiDrawerElement;
    'oai-drawer-stack': HTMLOaiDrawerStackElement;
    'oai-progress-indicator': HTMLOaiProgressIndicatorElement;
    'oai-toolbar': HTMLOaiToolbarElement;
  }
}

declare namespace LocalJSX {
  interface OaiButton extends JSXBase.HTMLAttributes<HTMLOaiButtonElement> {
    /**
    * (optional) The color of the button (pale / primary (default) / accent / error / warn)
    */
    'color'?: Color;
    /**
    * This attribute instructs browsers to download a URL instead of navigating to it, so the user will be prompted to save it as a local file. If the attribute has a value, it is used as the pre-filled file name in the Save prompt (the user can still change the file name if they want).
    */
    'download'?: string | undefined;
    /**
    * Contains a URL or a URL fragment that the hyperlink points to. If this property is set, an anchor tag will be rendered.
    */
    'href'?: string | undefined;
    /**
    * Specifies the relationship of the target object to the link object. The value is a space-separated list of [link types](https://developer.mozilla.org/en-US/docs/Web/HTML/Link_types).
    */
    'rel'?: string | undefined;
    /**
    * (optional) The minimum size of the button (xs / sm / lg / xl) (optional) The type of the button (default = filled / outlined (stroked)) (optional) The state of the button (disabled / pending / undefined = default)
    */
    'state'?: 'disabled' | 'pending';
    /**
    * Specifies where to display the linked URL. Only applies when an `href` is provided. Special keywords: `"_blank"`, `"_self"`, `"_parent"`, `"_top"`.
    */
    'target'?: string | undefined;
  }
  interface OaiDrawer extends JSXBase.HTMLAttributes<HTMLOaiDrawerElement> {
    'inlineSize'?: string;
    'stack': OAIDrawersStack;
  }
  interface OaiDrawerStack extends JSXBase.HTMLAttributes<HTMLOaiDrawerStackElement> {
    'stack'?: string;
  }
  interface OaiProgressIndicator extends JSXBase.HTMLAttributes<HTMLOaiProgressIndicatorElement> {
    'color'?: Color;
    /**
    * (optional) The size of the progress indicator (xs (default) / sm / lg / xl)
    */
    'size'?: 'xs' | 'sm' | 'lg' | 'xl';
  }
  interface OaiToolbar extends JSXBase.HTMLAttributes<HTMLOaiToolbarElement> {
    /**
    * The color to use from your application's color palette. Default options are: `"primary"`, `"secondary"`, `"tertiary"`, `"success"`, `"warning"`, `"danger"`, `"light"`, `"medium"`, and `"dark"`. For more information on colors, see [theming](/docs/theming/basics).
    */
    'color'?: Color;
  }

  interface IntrinsicElements {
    'oai-button': OaiButton;
    'oai-drawer': OaiDrawer;
    'oai-drawer-stack': OaiDrawerStack;
    'oai-progress-indicator': OaiProgressIndicator;
    'oai-toolbar': OaiToolbar;
  }
}

export { LocalJSX as JSX };


declare module "@stencil/core" {
  export namespace JSX {
    interface IntrinsicElements extends LocalJSX.IntrinsicElements {}
  }
}


