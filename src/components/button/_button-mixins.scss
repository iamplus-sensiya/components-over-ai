@import './button-size';
@import '../../utils/theme/color-theme.scss';
@import '../../utils/theme/fallback-variables.scss';

// $filled: '[type="filled"i]';
$outlined: '[type="outlined"i]';
$colors: map-get($fallback-variables, "colors");
$sizes: map-get($fallback-variables, "sizes");

%button {
  --button-inline-space-between-size: 1rem;
  --button-padding-inline-size: 2.5rem;
  font: inherit;
  font-variation-settings: inherit;
  position: relative;
  block-size: var(--size-block,
      map-get($sizes, "block"));
  min-inline-size: var(--button-size-inline, initial);
  border-radius: var(--border-radius,
      map-get($sizes, "border-radius"));
  box-sizing: border-box;
  outline: none;
  padding-inline-start: var(--button-padding-inline-size);
  padding-inline-end: var(--button-padding-inline-size);
  white-space: nowrap;
  -moz-osx-font-smoothing: grayscale;
  -webkit-font-smoothing: antialiased;
  display: block;
  position: relative;
  line-height: 1;
  contain: layout style;
  z-index: 0;
  appearance: none;

  &:not(:disabled) {
    cursor: pointer;
  }

  >.button-inner {
    display: flex;
    flex-flow: row nowrap;
    flex-shrink: 0;
    align-items: center;
    justify-content: center;
    width: 100%;
    height: 100%;
  }
}

@mixin button-host {
  user-select: none;
  text-overflow: ellipsis;
  white-space: nowrap;
  display: inline-block;
  vertical-align: top;
  pointer-events: auto;
  font-kerning: none;
  margin-inline-start: 2px;
  margin-inline-end: 2px;
  margin-block-start: 4px;
  margin-block-end: 4px;

  // @include oai-font-body-2;
  font: var(--font-body-2);

  ::slotted([slot="prefix"i]) {
    margin-inline-end: var(--button-inline-space-between-size);
  }

  ::slotted([slot="suffix"i]) {
    margin-inline-start: var(--button-inline-space-between-size);
  }

  .pending-indicator {
    position: absolute;
    left: calc(var(--button-padding-inline-size) / 2);
    transform: translateX(-50%);
  }
}

@mixin button {
  @extend %button;

  // filled is the default
  :host(:not(#{$outlined})) & {
    border: 0 none;
    background-color: var(--oai-color-base,
        map-get($colors, "base"));
    color: var(--oai-color-contrast,
        map-get($colors, "contrast"));
    transition: box-shadow .2s,
      background-color .5s;
    will-change: box-shadow,
      background-color;

    &:not(:disabled):not(:active) {
      box-shadow: 0 1px 3px rgba(0, 0, 0, 0.3);

      &:hover {
        background-color: var(--oai-color-tint,
            map-get($colors, "tint"));
        box-shadow: 0 0 2px rgba(0, 0, 0, 0.24);
      }
    }

    &:disabled {
      background-color: var(--oai-color-dim,
          map-get($colors, "dim"));
    }

  }

  :host(#{$outlined}) & {
    color: var(--oai-color-base,
        map-get($colors, "base"));
    background-color: transparent;
    border-color: currentColor;
    border-style: solid;
    border-width: 1px;
    transition: background-color .2s,
      color .2s;
    will-change: background-color, color;

    &:focus {
      background-color: var(--oai-color-shade,
          map-get($colors, "shade"));
      color: var(--oai-color-contrast,
          map-get($colors, "contrast"));
    }

    // &:not(:disabled):hover {
    //   background-color: #{$bgColor};
    //   color: var(--oai-color-contrast);
    // }

    &:focus,
    &:not(:disabled):hover {
      $tintColor: var(--oai-color-tint,
          map-get($colors, "tint"));
      color: var(--oai-color-contrast,
          map-get($colors, "contrast"));
      background-color: #{$tintColor};
      border-color: #{$tintColor};
    }

    &:disabled {
      color: var(--oai-color-dim,
          map-get($colors, "dim"));
    }

  }
}
